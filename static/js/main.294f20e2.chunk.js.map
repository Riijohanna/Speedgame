{"version":3,"sources":["Header/Header.js","Main/Main.js","Window/Window.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","score","Component","Main","active","onClick","myclick","Window","closeHandler","window","location","reload","id","App","state","current","rounds","showWindow","pace","timer","undefined","next","_this","gameOverHandler","min","max","nextActive","Math","floor","random","setState","prevState","setTimeout","bind","Object","assertThisInitialized","startGameHandler","clickHandler","btnId","console","log","clearTimeout","_this2","type","name","src_Main_Main","src_Header_Header","src_Window_Window","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.294f20e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Header\">\r\n  <h2>Your score: | {this.props.score} |</h2>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport './Main.css';\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className={\"Main\" + (this.props.active ? ' active': '')} onClick={this.props.myclick}>\r\n  </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Main;\r\n","import React, { Component } from 'react';\r\nimport './Window.css';\r\n\r\nclass Window extends Component {\r\n\r\n  closeHandler = () =>{\r\n    window.location.reload();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Footer\" id='overlay'>\r\n      <div id='win'>\r\n      <p id='gameover'>Ups, game over! Your final score is: {this.props.score}</p>\r\n      <button id='close' onClick={this.closeHandler}>\r\n      Close</button></div>\r\n      </div>\r\n\r\n            );\r\n          }\r\n        }\r\n\r\n        export default Window;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './Header/Header';\r\nimport Main from './Main/Main';\r\nimport Window from './Window/Window';\r\n\r\nfunction randomCurrent(min, max) {\r\n  return Math.floor (Math.random() * (max-min + 1)) + min;\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n  current: 0,\r\n  score: 0,\r\n  rounds: 0, //how many \"empty colors\" can be shown in circles (with no clicks in it)....\r\n  showWindow: false\r\n  };\r\n  pace = 1500; //this is not a state, it is always the same....so its outside not inside! State is being overwritten.\r\n  timer = undefined;\r\n\r\n  next = () => {\r\n    if(this.state.rounds >=5){\r\n      this.gameOverHandler();\r\n      return;\r\n    }\r\n    let nextActive = undefined;\r\n\r\n    do {\r\n      nextActive = randomCurrent(1,4);\r\n    } while (nextActive === this.state.current);\r\n    this.setState({\r\n      current: nextActive\r\n    });\r\n    this.setState(prevState => {\r\n      return {\r\n          rounds: prevState.rounds + 1\r\n      };\r\n    });\r\n\r\n\r\n    this.pace *=0.99;\r\n    this.timer = setTimeout(this.next.bind(this), this.pace);\r\n  }\r\n  startGameHandler = () => {\r\n      this.next();\r\n  }\r\n\r\n  clickHandler = (btnId) => {\r\n    console.log('clicked: ',btnId);\r\n    if (this.state.current !==btnId) {\r\n      this.gameOverHandler();\r\n      return;\r\n    }\r\n    this.setState({\r\n      rounds: 0 //everytime you click it gets zerou, and doesnt end the game....\r\n    });\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n          score: prevState.score + 1\r\n      };\r\n    });\r\n  };\r\n\r\n\r\n  gameOverHandler = () => {\r\n    clearTimeout(this.timer);\r\n    this.setState({\r\n        showWindow: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <h1>Speedgame</h1>\r\n      <div id=\"buttons\">\r\n      <button type=\"button\" name=\"Start\" id='Start' onClick={this.startGameHandler}>Start game</button>\r\n      <button type=\"button\" name=\"Stop\" id='Stop' onClick={this.gameOverHandler}>Stop game</button>\r\n      </div>\r\n      <div>\r\n      <Main active={this.state.current === 1} myclick = {() => this.clickHandler(1)} />\r\n      <Main active={this.state.current === 2} myclick = {() => this.clickHandler(2)} />\r\n      <Main active={this.state.current === 3} myclick = {() => this.clickHandler(3)} />\r\n      <Main active={this.state.current === 4} myclick = {() => this.clickHandler(4)} />\r\n      </div>\r\n      <Header score={this.state.score}/>\r\n      {this.state.showWindow && <Window score={this.state.score} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}